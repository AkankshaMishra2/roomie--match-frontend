"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/firebase.js":
/*!*************************!*\
  !*** ./lib/firebase.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: function() { return /* binding */ auth; },\n/* harmony export */   createChat: function() { return /* binding */ createChat; },\n/* harmony export */   db: function() { return /* binding */ db; },\n/* harmony export */   findMatches: function() { return /* binding */ findMatches; },\n/* harmony export */   getAllUsers: function() { return /* binding */ getAllUsers; },\n/* harmony export */   getChatMessages: function() { return /* binding */ getChatMessages; },\n/* harmony export */   getUserChats: function() { return /* binding */ getUserChats; },\n/* harmony export */   getUserMoods: function() { return /* binding */ getUserMoods; },\n/* harmony export */   getUserProfile: function() { return /* binding */ getUserProfile; },\n/* harmony export */   logoutUser: function() { return /* binding */ logoutUser; },\n/* harmony export */   recordMood: function() { return /* binding */ recordMood; },\n/* harmony export */   registerWithEmail: function() { return /* binding */ registerWithEmail; },\n/* harmony export */   saveQuizResults: function() { return /* binding */ saveQuizResults; },\n/* harmony export */   sendMessage: function() { return /* binding */ sendMessage; },\n/* harmony export */   signInUser: function() { return /* binding */ signInUser; },\n/* harmony export */   updateUserProfile: function() { return /* binding */ updateUserProfile; }\n/* harmony export */ });\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/auth */ \"./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _firebaseConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firebaseConfig */ \"./lib/firebaseConfig.js\");\n// // lib/firebase.js\n// // import { initializeApp, getApps } from 'firebase/app';\n// // import { getAuth, connectAuthEmulator } from 'firebase/auth';\n// // import { getFirestore, connectFirestoreEmulator } from 'firebase/firestore';\n// // import { getDatabase, connectDatabaseEmulator } from 'firebase/database';\n// //---------new--------------------//\n// import { initializeApp } from 'firebase/app';\n// import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from 'firebase/auth';\n// import { getFirestore, doc, setDoc, getDoc, updateDoc, collection, addDoc, query, where, getDocs, orderBy, limit } from 'firebase/firestore';\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyB0tW9q1mOLcG6T38esce4Dn-SxStSQV8s\",\n//   authDomain: \"roomie-match-01.firebaseapp.com\",\n//   projectId: \"roomie-match-01\",\n//   storageBucket: \"roomie-match-01.firebasestorage.app\",\n//   messagingSenderId: \"926512031667\",\n//   appId: \"1:926512031667:web:d7bd0e1a3025ce9eb7cdc6\",\n//   measurementId: \"G-4K5Z9CJWBE\",\n//   databaseURL: \"https://roomie-match-01.firebaseio.com\" // Added databaseURL\n// };\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// // Initialize services\n// const auth = getAuth(app);\n// const db = getFirestore(app);\n// // Auth functions\n// export const loginWithEmail = (email, password) => {\n//   return signInWithEmailAndPassword(auth, email, password);\n// };\n// export const registerWithEmail = async (email, password, userData) => {\n//   // Create user in Firebase Auth\n//   const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n//   // Add user data to Firestore\n//   await setDoc(doc(db, 'roomie-users', userCredential.user.uid), {\n//     name: userData.name,\n//     email: userData.email,\n//     gender: userData.gender || null,\n//     'phone-number': userData.phoneNumber || null,\n//     preferences: userData.preferences || {},\n//     createdAt: new Date()\n//   });\n//   return userCredential;\n// };\n// export const logoutUser = () => {\n//   return signOut(auth);\n// };\n// // User functions\n// export const getUserProfile = async (userId) => {\n//   const docRef = doc(db, 'roomie-users', userId);\n//   const docSnap = await getDoc(docRef);\n//   if (docSnap.exists()) {\n//     return { id: docSnap.id, ...docSnap.data() };\n//   } else {\n//     throw new Error('User not found');\n//   }\n// };\n// export const updateUserProfile = async (userId, userData) => {\n//   const userRef = doc(db, 'roomie-users', userId);\n//   await updateDoc(userRef, {\n//     ...userData,\n//     updatedAt: new Date()\n//   });\n//   return { success: true };\n// };\n// // Quiz functions\n// export const saveQuizResults = async (userId, quizData) => {\n//   const userRef = doc(db, 'roomie-users', userId);\n//   await updateDoc(userRef, {\n//     'preferences.quiz': quizData,\n//     'preferences.quizCompletedAt': new Date()\n//   });\n//   return { success: true };  \n// };\n// // Find potential roommate matches based on quiz answers\n// export const findMatches = async (userId) => {\n//   // Get current user's quiz data\n//   const userRef = doc(db, 'roomie-users', userId);\n//   const userSnap = await getDoc(userRef);\n//   if (!userSnap.exists() || !userSnap.data().preferences?.quiz) {\n//     throw new Error('User has not completed the compatibility quiz');\n//   }\n//   const userData = userSnap.data();\n//   // Get all users who have completed the quiz\n//   const usersRef = collection(db, 'roomie-users');\n//   const q = query(usersRef, where('preferences.quizCompletedAt', '!=', null));\n//   const querySnapshot = await getDocs(q);\n//   // Calculate compatibility scores\n//   const matches = [];\n//   querySnapshot.forEach((doc) => {\n//     if (doc.id !== userId) {\n//       const potentialMatch = doc.data();\n//       // Calculate compatibility score\n//       const compatibilityScore = calculateCompatibility(\n//         userData.preferences.quiz,\n//         potentialMatch.preferences?.quiz || {}\n//       );\n//       if (compatibilityScore > 0) {\n//         matches.push({\n//           userId: doc.id,\n//           name: potentialMatch.name,\n//           compatibility: compatibilityScore,\n//           gender: potentialMatch.gender\n//         });\n//       }\n//     }\n//   });\n//   // Sort by compatibility score (highest first)\n//   return matches.sort((a, b) => b.compatibility - a.compatibility);\n// };\n// // Helper function to calculate compatibility between two users\n// function calculateCompatibility(userQuiz, matchQuiz) {\n//   if (!userQuiz || !matchQuiz) return 0;\n//   let score = 0;\n//   let totalQuestions = 0;\n//   for (const question in userQuiz) {\n//     if (matchQuiz[question]) {\n//       totalQuestions++;\n//       if (userQuiz[question] === matchQuiz[question]) {\n//         score++;\n//       }\n//     }\n//   }\n//   return totalQuestions ? Math.round((score / totalQuestions) * 100) : 0;\n// }\n// // Chat functions\n// export const createChat = async (userId, otherUserId) => {\n//   // Check if chat already exists\n//   const chatsRef = collection(db, 'chats');\n//   const q = query(\n//     chatsRef, \n//     where('participants', 'array-contains', userId)\n//   );\n//   const querySnapshot = await getDocs(q);\n//   let existingChat = null;\n//   querySnapshot.forEach((doc) => {\n//     const chatData = doc.data();\n//     if (chatData.participants.includes(otherUserId)) {\n//       existingChat = { id: doc.id, ...chatData };\n//     }\n//   });\n//   if (existingChat) {\n//     return { chatId: existingChat.id };\n//   }\n//   // Create new chat\n//   const chatRef = await addDoc(collection(db, 'chats'), {\n//     participants: [userId, otherUserId],\n//     createdAt: new Date(),\n//     lastMessage: null,\n//     lastMessageAt: null\n//   });\n//   return { chatId: chatRef.id };\n// };\n// export const sendMessage = async (chatId, message) => {\n//   const chatRef = doc(db, 'chats', chatId);\n//   const messageData = {\n//     ...message,\n//     createdAt: new Date()\n//   };\n//   // Add message to chat\n//   const messageRef = await addDoc(\n//     collection(db, 'chats', chatId, 'messages'),\n//     messageData\n//   );\n//   // Update last message in chat\n//   await updateDoc(chatRef, {\n//     lastMessage: message.text,\n//     lastMessageAt: new Date(),\n//     [`lastMessageRead.${message.senderId}`]: true,\n//     [`lastMessageRead.${message.receiverId}`]: false\n//   });\n//   return { messageId: messageRef.id };\n// };\n// export const getChatMessages = async (chatId) => {\n//   const messagesRef = collection(db, 'chats', chatId, 'messages');\n//   const q = query(messagesRef, orderBy('createdAt', 'asc'));\n//   const querySnapshot = await getDocs(q);\n//   const messages = [];\n//   querySnapshot.forEach((doc) => {\n//     messages.push({ id: doc.id, ...doc.data() });\n//   });\n//   return messages;\n// };\n// export const getUserChats = async (userId) => {\n//   const chatsRef = collection(db, 'chats');\n//   const q = query(\n//     chatsRef,\n//     where('participants', 'array-contains', userId),\n//     orderBy('lastMessageAt', 'desc')\n//   );\n//   const querySnapshot = await getDocs(q);\n//   const chats = [];\n//   for (const doc of querySnapshot.docs) {\n//     const chatData = doc.data();\n//     // Get other participant details\n//     const otherUserId = chatData.participants.find(id => id !== userId);\n//     const otherUserDoc = await getDoc(doc(db, 'roomie-users', otherUserId));\n//     chats.push({\n//       id: doc.id,\n//       otherUser: {\n//         id: otherUserId,\n//         name: otherUserDoc.exists() ? otherUserDoc.data().name : 'Unknown User'\n//       },\n//       lastMessage: chatData.lastMessage,\n//       lastMessageAt: chatData.lastMessageAt,\n//       unread: chatData.lastMessageRead ? !chatData.lastMessageRead[userId] : false\n//     });\n//   }\n//   return chats;\n// };\n// // Mood tracking functions\n// export const recordMood = async (userId, moodData) => {\n//   await addDoc(\n//     collection(db, 'roomie-users', userId, 'moods'),\n//     {\n//       ...moodData,\n//       createdAt: new Date()\n//     }\n//   );\n//   return { success: true };\n// };\n// export const getUserMoods = async (userId, limitCount = 7) => {\n//   const moodsRef = collection(db, 'roomie-users', userId, 'moods');\n//   const q = query(\n//     moodsRef,\n//     orderBy('createdAt', 'desc'),\n//     limit(limitCount)\n//   );\n//   const querySnapshot = await getDocs(q);\n//   const moods = [];\n//   querySnapshot.forEach((doc) => {\n//     moods.push({ id: doc.id, ...doc.data() });\n//   });\n//   return moods;\n// };\n// export { auth, db };\n\n\n\n// Initialize services\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getAuth)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(_firebaseConfig__WEBPACK_IMPORTED_MODULE_2__.app);\n// Auth functions\nconst signInUser = async (email, password)=>{\n    try {\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithEmailAndPassword)(auth, email, password);\n        return userCredential;\n    } catch (error) {\n        console.error(\"Sign in error:\", error);\n        throw error;\n    }\n};\nconst registerWithEmail = async (email, password, userData)=>{\n    try {\n        // Validate required fields\n        if (!email || !password) {\n            throw new Error(\"Email and password are required\");\n        }\n        // Create user in Firebase Auth\n        const userCredential = await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.createUserWithEmailAndPassword)(auth, email, password);\n        // Prepare user data for Firestore\n        const userDataToSave = {\n            name: (userData === null || userData === void 0 ? void 0 : userData.name) || \"\",\n            email: email,\n            gender: (userData === null || userData === void 0 ? void 0 : userData.gender) || null,\n            phoneNumber: (userData === null || userData === void 0 ? void 0 : userData.phoneNumber) || null,\n            preferences: (userData === null || userData === void 0 ? void 0 : userData.preferences) || {},\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        // Add user data to Firestore\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"roomie-users\", userCredential.user.uid), userDataToSave);\n        return userCredential;\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        throw error;\n    }\n};\nconst logoutUser = ()=>{\n    return (0,firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signOut)(auth);\n};\n// User functions\nconst getUserProfile = async (userId)=>{\n    const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"roomie-users\", userId);\n    const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(docRef);\n    if (docSnap.exists()) {\n        return {\n            id: docSnap.id,\n            ...docSnap.data()\n        };\n    } else {\n        throw new Error(\"User not found\");\n    }\n};\nconst getAllUsers = async ()=>{\n    const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"roomie-users\");\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(usersRef);\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const users = [];\n    querySnapshot.forEach((doc)=>{\n        users.push({\n            id: doc.id,\n            ...doc.data()\n        });\n    });\n    return users;\n};\nconst updateUserProfile = async (userId, userData)=>{\n    const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"roomie-users\", userId);\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(userRef, {\n        ...userData,\n        updatedAt: new Date()\n    });\n    return {\n        success: true\n    };\n};\n// Quiz functions\nconst saveQuizResults = async (userId, quizData)=>{\n    const quizRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"roomie-users\", userId, \"quiz-answers\", \"latest\");\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.setDoc)(quizRef, {\n        answers: quizData,\n        completedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n    });\n    return {\n        success: true\n    };\n};\n// Find potential roommate matches based on quiz answers\nconst findMatches = async (userId)=>{\n    var _userSnap_data_preferences;\n    // Get current user's quiz data\n    const userRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"roomie-users\", userId);\n    const userSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(userRef);\n    if (!userSnap.exists() || !((_userSnap_data_preferences = userSnap.data().preferences) === null || _userSnap_data_preferences === void 0 ? void 0 : _userSnap_data_preferences.quiz)) {\n        throw new Error(\"User has not completed the compatibility quiz\");\n    }\n    const userData = userSnap.data();\n    // Get all users who have completed the quiz\n    const usersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"roomie-users\");\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(usersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"preferences.quizCompletedAt\", \"!=\", null));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    // Calculate compatibility scores\n    const matches = [];\n    querySnapshot.forEach((doc)=>{\n        if (doc.id !== userId) {\n            var _potentialMatch_preferences;\n            const potentialMatch = doc.data();\n            // Calculate compatibility score\n            const compatibilityScore = calculateCompatibility(userData.preferences.quiz, ((_potentialMatch_preferences = potentialMatch.preferences) === null || _potentialMatch_preferences === void 0 ? void 0 : _potentialMatch_preferences.quiz) || {});\n            if (compatibilityScore > 0) {\n                matches.push({\n                    userId: doc.id,\n                    name: potentialMatch.name,\n                    compatibility: compatibilityScore,\n                    gender: potentialMatch.gender\n                });\n            }\n        }\n    });\n    // Sort by compatibility score (highest first)\n    return matches.sort((a, b)=>b.compatibility - a.compatibility);\n};\n// Helper function to calculate compatibility between two users\nfunction calculateCompatibility(userQuiz, matchQuiz) {\n    if (!userQuiz || !matchQuiz) return 0;\n    let score = 0;\n    let totalQuestions = 0;\n    for(const question in userQuiz){\n        if (matchQuiz[question]) {\n            totalQuestions++;\n            if (userQuiz[question] === matchQuiz[question]) {\n                score++;\n            }\n        }\n    }\n    return totalQuestions ? Math.round(score / totalQuestions * 100) : 0;\n}\n// Chat functions\nconst createChat = async (userId, otherUserId)=>{\n    // Check if chat already exists\n    const chatsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"chats\");\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(chatsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"participants\", \"array-contains\", userId));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    let existingChat = null;\n    querySnapshot.forEach((doc)=>{\n        const chatData = doc.data();\n        if (chatData.participants.includes(otherUserId)) {\n            existingChat = {\n                id: doc.id,\n                ...chatData\n            };\n        }\n    });\n    if (existingChat) {\n        return {\n            chatId: existingChat.id\n        };\n    }\n    // Create new chat\n    const chatRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"chats\"), {\n        participants: [\n            userId,\n            otherUserId\n        ],\n        createdAt: new Date(),\n        lastMessage: null,\n        lastMessageAt: null\n    });\n    return {\n        chatId: chatRef.id\n    };\n};\nconst sendMessage = async (chatId, message)=>{\n    const chatRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(db, \"chats\", chatId);\n    const messageData = {\n        ...message,\n        createdAt: new Date()\n    };\n    // Add message to chat\n    const messageRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"chats\", chatId, \"messages\"), messageData);\n    // Update last message in chat\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(chatRef, {\n        lastMessage: message.text,\n        lastMessageAt: new Date(),\n        [\"lastMessageRead.\".concat(message.senderId)]: true,\n        [\"lastMessageRead.\".concat(message.receiverId)]: false\n    });\n    return {\n        messageId: messageRef.id\n    };\n};\nconst getChatMessages = async (chatId)=>{\n    const messagesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"chats\", chatId, \"messages\");\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(messagesRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"asc\"));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const messages = [];\n    querySnapshot.forEach((doc)=>{\n        messages.push({\n            id: doc.id,\n            ...doc.data()\n        });\n    });\n    return messages;\n};\nconst getUserChats = async (userId)=>{\n    const chatsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"chats\");\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(chatsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"participants\", \"array-contains\", userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"lastMessageAt\", \"desc\"));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const chats = [];\n    for (const doc of querySnapshot.docs){\n        const chatData = doc.data();\n        // Get other participant details\n        const otherUserId = chatData.participants.find((id)=>id !== userId);\n        const otherUserDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDoc)(doc(db, \"roomie-users\", otherUserId));\n        chats.push({\n            id: doc.id,\n            otherUser: {\n                id: otherUserId,\n                name: otherUserDoc.exists() ? otherUserDoc.data().name : \"Unknown User\"\n            },\n            lastMessage: chatData.lastMessage,\n            lastMessageAt: chatData.lastMessageAt,\n            unread: chatData.lastMessageRead ? !chatData.lastMessageRead[userId] : false\n        });\n    }\n    return chats;\n};\n// Mood tracking functions\nconst recordMood = async (userId, moodData)=>{\n    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"roomie-users\", userId, \"moods\"), {\n        ...moodData,\n        createdAt: new Date()\n    });\n    return {\n        success: true\n    };\n};\nconst getUserMoods = async function(userId) {\n    let limitCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 7;\n    const moodsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(db, \"roomie-users\", userId, \"moods\");\n    const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)(moodsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.orderBy)(\"createdAt\", \"desc\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.limit)(limitCount));\n    const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(q);\n    const moods = [];\n    querySnapshot.forEach((doc)=>{\n        moods.push({\n            id: doc.id,\n            ...doc.data()\n        });\n    });\n    return moods;\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q1QsRUFBRTtBQUdrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvZmlyZWJhc2UuanM/YWI0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvLyBsaWIvZmlyZWJhc2UuanNcbi8vIC8vIGltcG9ydCB7IGluaXRpYWxpemVBcHAsIGdldEFwcHMgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuLy8gLy8gaW1wb3J0IHsgZ2V0QXV0aCwgY29ubmVjdEF1dGhFbXVsYXRvciB9IGZyb20gJ2ZpcmViYXNlL2F1dGgnO1xuLy8gLy8gaW1wb3J0IHsgZ2V0RmlyZXN0b3JlLCBjb25uZWN0RmlyZXN0b3JlRW11bGF0b3IgfSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUnO1xuLy8gLy8gaW1wb3J0IHsgZ2V0RGF0YWJhc2UsIGNvbm5lY3REYXRhYmFzZUVtdWxhdG9yIH0gZnJvbSAnZmlyZWJhc2UvZGF0YWJhc2UnO1xuXG5cbi8vIC8vLS0tLS0tLS0tbmV3LS0tLS0tLS0tLS0tLS0tLS0tLS0vL1xuLy8gaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG4vLyBpbXBvcnQgeyBnZXRBdXRoLCBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCwgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkLCBzaWduT3V0IH0gZnJvbSAnZmlyZWJhc2UvYXV0aCc7XG4vLyBpbXBvcnQgeyBnZXRGaXJlc3RvcmUsIGRvYywgc2V0RG9jLCBnZXREb2MsIHVwZGF0ZURvYywgY29sbGVjdGlvbiwgYWRkRG9jLCBxdWVyeSwgd2hlcmUsIGdldERvY3MsIG9yZGVyQnksIGxpbWl0IH0gZnJvbSAnZmlyZWJhc2UvZmlyZXN0b3JlJztcblxuLy8gY29uc3QgZmlyZWJhc2VDb25maWcgPSB7XG4vLyAgIGFwaUtleTogXCJBSXphU3lCMHRXOXExbU9MY0c2VDM4ZXNjZTREbi1TeFN0U1FWOHNcIixcbi8vICAgYXV0aERvbWFpbjogXCJyb29taWUtbWF0Y2gtMDEuZmlyZWJhc2VhcHAuY29tXCIsXG4vLyAgIHByb2plY3RJZDogXCJyb29taWUtbWF0Y2gtMDFcIixcbi8vICAgc3RvcmFnZUJ1Y2tldDogXCJyb29taWUtbWF0Y2gtMDEuZmlyZWJhc2VzdG9yYWdlLmFwcFwiLFxuLy8gICBtZXNzYWdpbmdTZW5kZXJJZDogXCI5MjY1MTIwMzE2NjdcIixcbi8vICAgYXBwSWQ6IFwiMTo5MjY1MTIwMzE2Njc6d2ViOmQ3YmQwZTFhMzAyNWNlOWViN2NkYzZcIixcbi8vICAgbWVhc3VyZW1lbnRJZDogXCJHLTRLNVo5Q0pXQkVcIixcbi8vICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9yb29taWUtbWF0Y2gtMDEuZmlyZWJhc2Vpby5jb21cIiAvLyBBZGRlZCBkYXRhYmFzZVVSTFxuLy8gfTtcblxuLy8gLy8gSW5pdGlhbGl6ZSBGaXJlYmFzZVxuLy8gY29uc3QgYXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7XG5cbi8vIC8vIEluaXRpYWxpemUgc2VydmljZXNcbi8vIGNvbnN0IGF1dGggPSBnZXRBdXRoKGFwcCk7XG4vLyBjb25zdCBkYiA9IGdldEZpcmVzdG9yZShhcHApO1xuXG4vLyAvLyBBdXRoIGZ1bmN0aW9uc1xuLy8gZXhwb3J0IGNvbnN0IGxvZ2luV2l0aEVtYWlsID0gKGVtYWlsLCBwYXNzd29yZCkgPT4ge1xuLy8gICByZXR1cm4gc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCByZWdpc3RlcldpdGhFbWFpbCA9IGFzeW5jIChlbWFpbCwgcGFzc3dvcmQsIHVzZXJEYXRhKSA9PiB7XG4vLyAgIC8vIENyZWF0ZSB1c2VyIGluIEZpcmViYXNlIEF1dGhcbi8vICAgY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBjcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbiAgXG4vLyAgIC8vIEFkZCB1c2VyIGRhdGEgdG8gRmlyZXN0b3JlXG4vLyAgIGF3YWl0IHNldERvYyhkb2MoZGIsICdyb29taWUtdXNlcnMnLCB1c2VyQ3JlZGVudGlhbC51c2VyLnVpZCksIHtcbi8vICAgICBuYW1lOiB1c2VyRGF0YS5uYW1lLFxuLy8gICAgIGVtYWlsOiB1c2VyRGF0YS5lbWFpbCxcbi8vICAgICBnZW5kZXI6IHVzZXJEYXRhLmdlbmRlciB8fCBudWxsLFxuLy8gICAgICdwaG9uZS1udW1iZXInOiB1c2VyRGF0YS5waG9uZU51bWJlciB8fCBudWxsLFxuLy8gICAgIHByZWZlcmVuY2VzOiB1c2VyRGF0YS5wcmVmZXJlbmNlcyB8fCB7fSxcbi8vICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKClcbi8vICAgfSk7XG4gIFxuLy8gICByZXR1cm4gdXNlckNyZWRlbnRpYWw7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgbG9nb3V0VXNlciA9ICgpID0+IHtcbi8vICAgcmV0dXJuIHNpZ25PdXQoYXV0aCk7XG4vLyB9O1xuXG4vLyAvLyBVc2VyIGZ1bmN0aW9uc1xuLy8gZXhwb3J0IGNvbnN0IGdldFVzZXJQcm9maWxlID0gYXN5bmMgKHVzZXJJZCkgPT4ge1xuLy8gICBjb25zdCBkb2NSZWYgPSBkb2MoZGIsICdyb29taWUtdXNlcnMnLCB1c2VySWQpO1xuLy8gICBjb25zdCBkb2NTbmFwID0gYXdhaXQgZ2V0RG9jKGRvY1JlZik7XG4gIFxuLy8gICBpZiAoZG9jU25hcC5leGlzdHMoKSkge1xuLy8gICAgIHJldHVybiB7IGlkOiBkb2NTbmFwLmlkLCAuLi5kb2NTbmFwLmRhdGEoKSB9O1xuLy8gICB9IGVsc2Uge1xuLy8gICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQnKTtcbi8vICAgfVxuLy8gfTtcblxuLy8gZXhwb3J0IGNvbnN0IHVwZGF0ZVVzZXJQcm9maWxlID0gYXN5bmMgKHVzZXJJZCwgdXNlckRhdGEpID0+IHtcbi8vICAgY29uc3QgdXNlclJlZiA9IGRvYyhkYiwgJ3Jvb21pZS11c2VycycsIHVzZXJJZCk7XG4vLyAgIGF3YWl0IHVwZGF0ZURvYyh1c2VyUmVmLCB7XG4vLyAgICAgLi4udXNlckRhdGEsXG4vLyAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4vLyAgIH0pO1xuICBcbi8vICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuLy8gfTtcblxuLy8gLy8gUXVpeiBmdW5jdGlvbnNcbi8vIGV4cG9ydCBjb25zdCBzYXZlUXVpelJlc3VsdHMgPSBhc3luYyAodXNlcklkLCBxdWl6RGF0YSkgPT4ge1xuLy8gICBjb25zdCB1c2VyUmVmID0gZG9jKGRiLCAncm9vbWllLXVzZXJzJywgdXNlcklkKTtcbi8vICAgYXdhaXQgdXBkYXRlRG9jKHVzZXJSZWYsIHtcbi8vICAgICAncHJlZmVyZW5jZXMucXVpeic6IHF1aXpEYXRhLFxuLy8gICAgICdwcmVmZXJlbmNlcy5xdWl6Q29tcGxldGVkQXQnOiBuZXcgRGF0ZSgpXG4vLyAgIH0pO1xuICBcbi8vICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9OyAgXG4vLyB9O1xuXG4vLyAvLyBGaW5kIHBvdGVudGlhbCByb29tbWF0ZSBtYXRjaGVzIGJhc2VkIG9uIHF1aXogYW5zd2Vyc1xuLy8gZXhwb3J0IGNvbnN0IGZpbmRNYXRjaGVzID0gYXN5bmMgKHVzZXJJZCkgPT4ge1xuLy8gICAvLyBHZXQgY3VycmVudCB1c2VyJ3MgcXVpeiBkYXRhXG4vLyAgIGNvbnN0IHVzZXJSZWYgPSBkb2MoZGIsICdyb29taWUtdXNlcnMnLCB1c2VySWQpO1xuLy8gICBjb25zdCB1c2VyU25hcCA9IGF3YWl0IGdldERvYyh1c2VyUmVmKTtcbiAgXG4vLyAgIGlmICghdXNlclNuYXAuZXhpc3RzKCkgfHwgIXVzZXJTbmFwLmRhdGEoKS5wcmVmZXJlbmNlcz8ucXVpeikge1xuLy8gICAgIHRocm93IG5ldyBFcnJvcignVXNlciBoYXMgbm90IGNvbXBsZXRlZCB0aGUgY29tcGF0aWJpbGl0eSBxdWl6Jyk7XG4vLyAgIH1cbiAgXG4vLyAgIGNvbnN0IHVzZXJEYXRhID0gdXNlclNuYXAuZGF0YSgpO1xuICBcbi8vICAgLy8gR2V0IGFsbCB1c2VycyB3aG8gaGF2ZSBjb21wbGV0ZWQgdGhlIHF1aXpcbi8vICAgY29uc3QgdXNlcnNSZWYgPSBjb2xsZWN0aW9uKGRiLCAncm9vbWllLXVzZXJzJyk7XG4vLyAgIGNvbnN0IHEgPSBxdWVyeSh1c2Vyc1JlZiwgd2hlcmUoJ3ByZWZlcmVuY2VzLnF1aXpDb21wbGV0ZWRBdCcsICchPScsIG51bGwpKTtcbi8vICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG4gIFxuLy8gICAvLyBDYWxjdWxhdGUgY29tcGF0aWJpbGl0eSBzY29yZXNcbi8vICAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuLy8gICBxdWVyeVNuYXBzaG90LmZvckVhY2goKGRvYykgPT4ge1xuLy8gICAgIGlmIChkb2MuaWQgIT09IHVzZXJJZCkge1xuLy8gICAgICAgY29uc3QgcG90ZW50aWFsTWF0Y2ggPSBkb2MuZGF0YSgpO1xuICAgICAgXG4vLyAgICAgICAvLyBDYWxjdWxhdGUgY29tcGF0aWJpbGl0eSBzY29yZVxuLy8gICAgICAgY29uc3QgY29tcGF0aWJpbGl0eVNjb3JlID0gY2FsY3VsYXRlQ29tcGF0aWJpbGl0eShcbi8vICAgICAgICAgdXNlckRhdGEucHJlZmVyZW5jZXMucXVpeixcbi8vICAgICAgICAgcG90ZW50aWFsTWF0Y2gucHJlZmVyZW5jZXM/LnF1aXogfHwge31cbi8vICAgICAgICk7XG4gICAgICBcbi8vICAgICAgIGlmIChjb21wYXRpYmlsaXR5U2NvcmUgPiAwKSB7XG4vLyAgICAgICAgIG1hdGNoZXMucHVzaCh7XG4vLyAgICAgICAgICAgdXNlcklkOiBkb2MuaWQsXG4vLyAgICAgICAgICAgbmFtZTogcG90ZW50aWFsTWF0Y2gubmFtZSxcbi8vICAgICAgICAgICBjb21wYXRpYmlsaXR5OiBjb21wYXRpYmlsaXR5U2NvcmUsXG4vLyAgICAgICAgICAgZ2VuZGVyOiBwb3RlbnRpYWxNYXRjaC5nZW5kZXJcbi8vICAgICAgICAgfSk7XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICB9KTtcbiAgXG4vLyAgIC8vIFNvcnQgYnkgY29tcGF0aWJpbGl0eSBzY29yZSAoaGlnaGVzdCBmaXJzdClcbi8vICAgcmV0dXJuIG1hdGNoZXMuc29ydCgoYSwgYikgPT4gYi5jb21wYXRpYmlsaXR5IC0gYS5jb21wYXRpYmlsaXR5KTtcbi8vIH07XG5cbi8vIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgY29tcGF0aWJpbGl0eSBiZXR3ZWVuIHR3byB1c2Vyc1xuLy8gZnVuY3Rpb24gY2FsY3VsYXRlQ29tcGF0aWJpbGl0eSh1c2VyUXVpeiwgbWF0Y2hRdWl6KSB7XG4vLyAgIGlmICghdXNlclF1aXogfHwgIW1hdGNoUXVpeikgcmV0dXJuIDA7XG4gIFxuLy8gICBsZXQgc2NvcmUgPSAwO1xuLy8gICBsZXQgdG90YWxRdWVzdGlvbnMgPSAwO1xuICBcbi8vICAgZm9yIChjb25zdCBxdWVzdGlvbiBpbiB1c2VyUXVpeikge1xuLy8gICAgIGlmIChtYXRjaFF1aXpbcXVlc3Rpb25dKSB7XG4vLyAgICAgICB0b3RhbFF1ZXN0aW9ucysrO1xuLy8gICAgICAgaWYgKHVzZXJRdWl6W3F1ZXN0aW9uXSA9PT0gbWF0Y2hRdWl6W3F1ZXN0aW9uXSkge1xuLy8gICAgICAgICBzY29yZSsrO1xuLy8gICAgICAgfVxuLy8gICAgIH1cbi8vICAgfVxuICBcbi8vICAgcmV0dXJuIHRvdGFsUXVlc3Rpb25zID8gTWF0aC5yb3VuZCgoc2NvcmUgLyB0b3RhbFF1ZXN0aW9ucykgKiAxMDApIDogMDtcbi8vIH1cblxuLy8gLy8gQ2hhdCBmdW5jdGlvbnNcbi8vIGV4cG9ydCBjb25zdCBjcmVhdGVDaGF0ID0gYXN5bmMgKHVzZXJJZCwgb3RoZXJVc2VySWQpID0+IHtcbi8vICAgLy8gQ2hlY2sgaWYgY2hhdCBhbHJlYWR5IGV4aXN0c1xuLy8gICBjb25zdCBjaGF0c1JlZiA9IGNvbGxlY3Rpb24oZGIsICdjaGF0cycpO1xuLy8gICBjb25zdCBxID0gcXVlcnkoXG4vLyAgICAgY2hhdHNSZWYsIFxuLy8gICAgIHdoZXJlKCdwYXJ0aWNpcGFudHMnLCAnYXJyYXktY29udGFpbnMnLCB1c2VySWQpXG4vLyAgICk7XG4gIFxuLy8gICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKTtcbi8vICAgbGV0IGV4aXN0aW5nQ2hhdCA9IG51bGw7XG4gIFxuLy8gICBxdWVyeVNuYXBzaG90LmZvckVhY2goKGRvYykgPT4ge1xuLy8gICAgIGNvbnN0IGNoYXREYXRhID0gZG9jLmRhdGEoKTtcbi8vICAgICBpZiAoY2hhdERhdGEucGFydGljaXBhbnRzLmluY2x1ZGVzKG90aGVyVXNlcklkKSkge1xuLy8gICAgICAgZXhpc3RpbmdDaGF0ID0geyBpZDogZG9jLmlkLCAuLi5jaGF0RGF0YSB9O1xuLy8gICAgIH1cbi8vICAgfSk7XG4gIFxuLy8gICBpZiAoZXhpc3RpbmdDaGF0KSB7XG4vLyAgICAgcmV0dXJuIHsgY2hhdElkOiBleGlzdGluZ0NoYXQuaWQgfTtcbi8vICAgfVxuICBcbi8vICAgLy8gQ3JlYXRlIG5ldyBjaGF0XG4vLyAgIGNvbnN0IGNoYXRSZWYgPSBhd2FpdCBhZGREb2MoY29sbGVjdGlvbihkYiwgJ2NoYXRzJyksIHtcbi8vICAgICBwYXJ0aWNpcGFudHM6IFt1c2VySWQsIG90aGVyVXNlcklkXSxcbi8vICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4vLyAgICAgbGFzdE1lc3NhZ2U6IG51bGwsXG4vLyAgICAgbGFzdE1lc3NhZ2VBdDogbnVsbFxuLy8gICB9KTtcbiAgXG4vLyAgIHJldHVybiB7IGNoYXRJZDogY2hhdFJlZi5pZCB9O1xuLy8gfTtcblxuLy8gZXhwb3J0IGNvbnN0IHNlbmRNZXNzYWdlID0gYXN5bmMgKGNoYXRJZCwgbWVzc2FnZSkgPT4ge1xuLy8gICBjb25zdCBjaGF0UmVmID0gZG9jKGRiLCAnY2hhdHMnLCBjaGF0SWQpO1xuLy8gICBjb25zdCBtZXNzYWdlRGF0YSA9IHtcbi8vICAgICAuLi5tZXNzYWdlLFxuLy8gICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKVxuLy8gICB9O1xuICBcbi8vICAgLy8gQWRkIG1lc3NhZ2UgdG8gY2hhdFxuLy8gICBjb25zdCBtZXNzYWdlUmVmID0gYXdhaXQgYWRkRG9jKFxuLy8gICAgIGNvbGxlY3Rpb24oZGIsICdjaGF0cycsIGNoYXRJZCwgJ21lc3NhZ2VzJyksXG4vLyAgICAgbWVzc2FnZURhdGFcbi8vICAgKTtcbiAgXG4vLyAgIC8vIFVwZGF0ZSBsYXN0IG1lc3NhZ2UgaW4gY2hhdFxuLy8gICBhd2FpdCB1cGRhdGVEb2MoY2hhdFJlZiwge1xuLy8gICAgIGxhc3RNZXNzYWdlOiBtZXNzYWdlLnRleHQsXG4vLyAgICAgbGFzdE1lc3NhZ2VBdDogbmV3IERhdGUoKSxcbi8vICAgICBbYGxhc3RNZXNzYWdlUmVhZC4ke21lc3NhZ2Uuc2VuZGVySWR9YF06IHRydWUsXG4vLyAgICAgW2BsYXN0TWVzc2FnZVJlYWQuJHttZXNzYWdlLnJlY2VpdmVySWR9YF06IGZhbHNlXG4vLyAgIH0pO1xuICBcbi8vICAgcmV0dXJuIHsgbWVzc2FnZUlkOiBtZXNzYWdlUmVmLmlkIH07XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgZ2V0Q2hhdE1lc3NhZ2VzID0gYXN5bmMgKGNoYXRJZCkgPT4ge1xuLy8gICBjb25zdCBtZXNzYWdlc1JlZiA9IGNvbGxlY3Rpb24oZGIsICdjaGF0cycsIGNoYXRJZCwgJ21lc3NhZ2VzJyk7XG4vLyAgIGNvbnN0IHEgPSBxdWVyeShtZXNzYWdlc1JlZiwgb3JkZXJCeSgnY3JlYXRlZEF0JywgJ2FzYycpKTtcbi8vICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG4gIFxuLy8gICBjb25zdCBtZXNzYWdlcyA9IFtdO1xuLy8gICBxdWVyeVNuYXBzaG90LmZvckVhY2goKGRvYykgPT4ge1xuLy8gICAgIG1lc3NhZ2VzLnB1c2goeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pO1xuLy8gICB9KTtcbiAgXG4vLyAgIHJldHVybiBtZXNzYWdlcztcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCBnZXRVc2VyQ2hhdHMgPSBhc3luYyAodXNlcklkKSA9PiB7XG4vLyAgIGNvbnN0IGNoYXRzUmVmID0gY29sbGVjdGlvbihkYiwgJ2NoYXRzJyk7XG4vLyAgIGNvbnN0IHEgPSBxdWVyeShcbi8vICAgICBjaGF0c1JlZixcbi8vICAgICB3aGVyZSgncGFydGljaXBhbnRzJywgJ2FycmF5LWNvbnRhaW5zJywgdXNlcklkKSxcbi8vICAgICBvcmRlckJ5KCdsYXN0TWVzc2FnZUF0JywgJ2Rlc2MnKVxuLy8gICApO1xuICBcbi8vICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG4gIFxuLy8gICBjb25zdCBjaGF0cyA9IFtdO1xuLy8gICBmb3IgKGNvbnN0IGRvYyBvZiBxdWVyeVNuYXBzaG90LmRvY3MpIHtcbi8vICAgICBjb25zdCBjaGF0RGF0YSA9IGRvYy5kYXRhKCk7XG4gICAgXG4vLyAgICAgLy8gR2V0IG90aGVyIHBhcnRpY2lwYW50IGRldGFpbHNcbi8vICAgICBjb25zdCBvdGhlclVzZXJJZCA9IGNoYXREYXRhLnBhcnRpY2lwYW50cy5maW5kKGlkID0+IGlkICE9PSB1c2VySWQpO1xuLy8gICAgIGNvbnN0IG90aGVyVXNlckRvYyA9IGF3YWl0IGdldERvYyhkb2MoZGIsICdyb29taWUtdXNlcnMnLCBvdGhlclVzZXJJZCkpO1xuICAgIFxuLy8gICAgIGNoYXRzLnB1c2goe1xuLy8gICAgICAgaWQ6IGRvYy5pZCxcbi8vICAgICAgIG90aGVyVXNlcjoge1xuLy8gICAgICAgICBpZDogb3RoZXJVc2VySWQsXG4vLyAgICAgICAgIG5hbWU6IG90aGVyVXNlckRvYy5leGlzdHMoKSA/IG90aGVyVXNlckRvYy5kYXRhKCkubmFtZSA6ICdVbmtub3duIFVzZXInXG4vLyAgICAgICB9LFxuLy8gICAgICAgbGFzdE1lc3NhZ2U6IGNoYXREYXRhLmxhc3RNZXNzYWdlLFxuLy8gICAgICAgbGFzdE1lc3NhZ2VBdDogY2hhdERhdGEubGFzdE1lc3NhZ2VBdCxcbi8vICAgICAgIHVucmVhZDogY2hhdERhdGEubGFzdE1lc3NhZ2VSZWFkID8gIWNoYXREYXRhLmxhc3RNZXNzYWdlUmVhZFt1c2VySWRdIDogZmFsc2Vcbi8vICAgICB9KTtcbi8vICAgfVxuICBcbi8vICAgcmV0dXJuIGNoYXRzO1xuLy8gfTtcblxuLy8gLy8gTW9vZCB0cmFja2luZyBmdW5jdGlvbnNcbi8vIGV4cG9ydCBjb25zdCByZWNvcmRNb29kID0gYXN5bmMgKHVzZXJJZCwgbW9vZERhdGEpID0+IHtcbi8vICAgYXdhaXQgYWRkRG9jKFxuLy8gICAgIGNvbGxlY3Rpb24oZGIsICdyb29taWUtdXNlcnMnLCB1c2VySWQsICdtb29kcycpLFxuLy8gICAgIHtcbi8vICAgICAgIC4uLm1vb2REYXRhLFxuLy8gICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXG4vLyAgICAgfVxuLy8gICApO1xuICBcbi8vICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuLy8gfTtcblxuLy8gZXhwb3J0IGNvbnN0IGdldFVzZXJNb29kcyA9IGFzeW5jICh1c2VySWQsIGxpbWl0Q291bnQgPSA3KSA9PiB7XG4vLyAgIGNvbnN0IG1vb2RzUmVmID0gY29sbGVjdGlvbihkYiwgJ3Jvb21pZS11c2VycycsIHVzZXJJZCwgJ21vb2RzJyk7XG4vLyAgIGNvbnN0IHEgPSBxdWVyeShcbi8vICAgICBtb29kc1JlZixcbi8vICAgICBvcmRlckJ5KCdjcmVhdGVkQXQnLCAnZGVzYycpLFxuLy8gICAgIGxpbWl0KGxpbWl0Q291bnQpXG4vLyAgICk7XG4gIFxuLy8gICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKTtcbiAgXG4vLyAgIGNvbnN0IG1vb2RzID0gW107XG4vLyAgIHF1ZXJ5U25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7XG4vLyAgICAgbW9vZHMucHVzaCh7IGlkOiBkb2MuaWQsIC4uLmRvYy5kYXRhKCkgfSk7XG4vLyAgIH0pO1xuICBcbi8vICAgcmV0dXJuIG1vb2RzO1xuLy8gfTtcblxuXG4vLyBleHBvcnQgeyBhdXRoLCBkYiB9O1xuXG5cblxuaW1wb3J0IHsgZ2V0QXV0aCwgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQsIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCwgc2lnbk91dCB9IGZyb20gJ2ZpcmViYXNlL2F1dGgnO1xuaW1wb3J0IHsgZ2V0RmlyZXN0b3JlLCBkb2MsIHNldERvYywgZ2V0RG9jLCB1cGRhdGVEb2MsIGNvbGxlY3Rpb24sIGFkZERvYywgcXVlcnksIHdoZXJlLCBnZXREb2NzLCBvcmRlckJ5LCBsaW1pdCwgc2VydmVyVGltZXN0YW1wIH0gZnJvbSAnZmlyZWJhc2UvZmlyZXN0b3JlJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4vZmlyZWJhc2VDb25maWcnO1xuXG4vLyBJbml0aWFsaXplIHNlcnZpY2VzXG5jb25zdCBhdXRoID0gZ2V0QXV0aChhcHApO1xuY29uc3QgZGIgPSBnZXRGaXJlc3RvcmUoYXBwKTtcblxuLy8gQXV0aCBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCBzaWduSW5Vc2VyID0gYXN5bmMgKGVtYWlsLCBwYXNzd29yZCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbiAgICByZXR1cm4gdXNlckNyZWRlbnRpYWw7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignU2lnbiBpbiBlcnJvcjonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCByZWdpc3RlcldpdGhFbWFpbCA9IGFzeW5jIChlbWFpbCwgcGFzc3dvcmQsIHVzZXJEYXRhKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgaWYgKCFlbWFpbCB8fCAhcGFzc3dvcmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRW1haWwgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSB1c2VyIGluIEZpcmViYXNlIEF1dGhcbiAgICBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZChhdXRoLCBlbWFpbCwgcGFzc3dvcmQpO1xuICAgIFxuICAgIC8vIFByZXBhcmUgdXNlciBkYXRhIGZvciBGaXJlc3RvcmVcbiAgICBjb25zdCB1c2VyRGF0YVRvU2F2ZSA9IHtcbiAgICAgIG5hbWU6IHVzZXJEYXRhPy5uYW1lIHx8ICcnLFxuICAgICAgZW1haWw6IGVtYWlsLCAvLyBVc2UgdGhlIGVtYWlsIGZyb20gYXV0aFxuICAgICAgZ2VuZGVyOiB1c2VyRGF0YT8uZ2VuZGVyIHx8IG51bGwsXG4gICAgICBwaG9uZU51bWJlcjogdXNlckRhdGE/LnBob25lTnVtYmVyIHx8IG51bGwsXG4gICAgICBwcmVmZXJlbmNlczogdXNlckRhdGE/LnByZWZlcmVuY2VzIHx8IHt9LFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgfTtcblxuICAgIC8vIEFkZCB1c2VyIGRhdGEgdG8gRmlyZXN0b3JlXG4gICAgYXdhaXQgc2V0RG9jKGRvYyhkYiwgJ3Jvb21pZS11c2VycycsIHVzZXJDcmVkZW50aWFsLnVzZXIudWlkKSwgdXNlckRhdGFUb1NhdmUpO1xuICAgIFxuICAgIHJldHVybiB1c2VyQ3JlZGVudGlhbDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdSZWdpc3RyYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9nb3V0VXNlciA9ICgpID0+IHtcbiAgcmV0dXJuIHNpZ25PdXQoYXV0aCk7XG59O1xuXG4vLyBVc2VyIGZ1bmN0aW9uc1xuZXhwb3J0IGNvbnN0IGdldFVzZXJQcm9maWxlID0gYXN5bmMgKHVzZXJJZCkgPT4ge1xuICBjb25zdCBkb2NSZWYgPSBkb2MoZGIsICdyb29taWUtdXNlcnMnLCB1c2VySWQpO1xuICBjb25zdCBkb2NTbmFwID0gYXdhaXQgZ2V0RG9jKGRvY1JlZik7XG4gIFxuICBpZiAoZG9jU25hcC5leGlzdHMoKSkge1xuICAgIHJldHVybiB7IGlkOiBkb2NTbmFwLmlkLCAuLi5kb2NTbmFwLmRhdGEoKSB9O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQnKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldEFsbFVzZXJzID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCB1c2Vyc1JlZiA9IGNvbGxlY3Rpb24oZGIsICdyb29taWUtdXNlcnMnKTtcbiAgY29uc3QgcSA9IHF1ZXJ5KHVzZXJzUmVmKTtcbiAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG4gIFxuICBjb25zdCB1c2VycyA9IFtdO1xuICBxdWVyeVNuYXBzaG90LmZvckVhY2goKGRvYykgPT4ge1xuICAgIHVzZXJzLnB1c2goeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pO1xuICB9KTtcbiAgXG4gIHJldHVybiB1c2Vycztcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVVc2VyUHJvZmlsZSA9IGFzeW5jICh1c2VySWQsIHVzZXJEYXRhKSA9PiB7XG4gIGNvbnN0IHVzZXJSZWYgPSBkb2MoZGIsICdyb29taWUtdXNlcnMnLCB1c2VySWQpO1xuICBhd2FpdCB1cGRhdGVEb2ModXNlclJlZiwge1xuICAgIC4uLnVzZXJEYXRhLFxuICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICB9KTtcbiAgXG4gIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbn07XG5cbi8vIFF1aXogZnVuY3Rpb25zXG5leHBvcnQgY29uc3Qgc2F2ZVF1aXpSZXN1bHRzID0gYXN5bmMgKHVzZXJJZCwgcXVpekRhdGEpID0+IHtcbiAgY29uc3QgcXVpelJlZiA9IGRvYyhkYiwgJ3Jvb21pZS11c2VycycsIHVzZXJJZCwgJ3F1aXotYW5zd2VycycsICdsYXRlc3QnKTtcbiAgYXdhaXQgc2V0RG9jKHF1aXpSZWYsIHtcbiAgICBhbnN3ZXJzOiBxdWl6RGF0YSxcbiAgICBjb21wbGV0ZWRBdDogc2VydmVyVGltZXN0YW1wKClcbiAgfSk7XG4gIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTsgIFxufTtcblxuLy8gRmluZCBwb3RlbnRpYWwgcm9vbW1hdGUgbWF0Y2hlcyBiYXNlZCBvbiBxdWl6IGFuc3dlcnNcbmV4cG9ydCBjb25zdCBmaW5kTWF0Y2hlcyA9IGFzeW5jICh1c2VySWQpID0+IHtcbiAgLy8gR2V0IGN1cnJlbnQgdXNlcidzIHF1aXogZGF0YVxuICBjb25zdCB1c2VyUmVmID0gZG9jKGRiLCAncm9vbWllLXVzZXJzJywgdXNlcklkKTtcbiAgY29uc3QgdXNlclNuYXAgPSBhd2FpdCBnZXREb2ModXNlclJlZik7XG4gIFxuICBpZiAoIXVzZXJTbmFwLmV4aXN0cygpIHx8ICF1c2VyU25hcC5kYXRhKCkucHJlZmVyZW5jZXM/LnF1aXopIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgaGFzIG5vdCBjb21wbGV0ZWQgdGhlIGNvbXBhdGliaWxpdHkgcXVpeicpO1xuICB9XG4gIFxuICBjb25zdCB1c2VyRGF0YSA9IHVzZXJTbmFwLmRhdGEoKTtcbiAgXG4gIC8vIEdldCBhbGwgdXNlcnMgd2hvIGhhdmUgY29tcGxldGVkIHRoZSBxdWl6XG4gIGNvbnN0IHVzZXJzUmVmID0gY29sbGVjdGlvbihkYiwgJ3Jvb21pZS11c2VycycpO1xuICBjb25zdCBxID0gcXVlcnkodXNlcnNSZWYsIHdoZXJlKCdwcmVmZXJlbmNlcy5xdWl6Q29tcGxldGVkQXQnLCAnIT0nLCBudWxsKSk7XG4gIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpO1xuICBcbiAgLy8gQ2FsY3VsYXRlIGNvbXBhdGliaWxpdHkgc2NvcmVzXG4gIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICBpZiAoZG9jLmlkICE9PSB1c2VySWQpIHtcbiAgICAgIGNvbnN0IHBvdGVudGlhbE1hdGNoID0gZG9jLmRhdGEoKTtcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXRlIGNvbXBhdGliaWxpdHkgc2NvcmVcbiAgICAgIGNvbnN0IGNvbXBhdGliaWxpdHlTY29yZSA9IGNhbGN1bGF0ZUNvbXBhdGliaWxpdHkoXG4gICAgICAgIHVzZXJEYXRhLnByZWZlcmVuY2VzLnF1aXosXG4gICAgICAgIHBvdGVudGlhbE1hdGNoLnByZWZlcmVuY2VzPy5xdWl6IHx8IHt9XG4gICAgICApO1xuICAgICAgXG4gICAgICBpZiAoY29tcGF0aWJpbGl0eVNjb3JlID4gMCkge1xuICAgICAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgICAgIHVzZXJJZDogZG9jLmlkLFxuICAgICAgICAgIG5hbWU6IHBvdGVudGlhbE1hdGNoLm5hbWUsXG4gICAgICAgICAgY29tcGF0aWJpbGl0eTogY29tcGF0aWJpbGl0eVNjb3JlLFxuICAgICAgICAgIGdlbmRlcjogcG90ZW50aWFsTWF0Y2guZ2VuZGVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBTb3J0IGJ5IGNvbXBhdGliaWxpdHkgc2NvcmUgKGhpZ2hlc3QgZmlyc3QpXG4gIHJldHVybiBtYXRjaGVzLnNvcnQoKGEsIGIpID0+IGIuY29tcGF0aWJpbGl0eSAtIGEuY29tcGF0aWJpbGl0eSk7XG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIGNvbXBhdGliaWxpdHkgYmV0d2VlbiB0d28gdXNlcnNcbmZ1bmN0aW9uIGNhbGN1bGF0ZUNvbXBhdGliaWxpdHkodXNlclF1aXosIG1hdGNoUXVpeikge1xuICBpZiAoIXVzZXJRdWl6IHx8ICFtYXRjaFF1aXopIHJldHVybiAwO1xuICBcbiAgbGV0IHNjb3JlID0gMDtcbiAgbGV0IHRvdGFsUXVlc3Rpb25zID0gMDtcbiAgXG4gIGZvciAoY29uc3QgcXVlc3Rpb24gaW4gdXNlclF1aXopIHtcbiAgICBpZiAobWF0Y2hRdWl6W3F1ZXN0aW9uXSkge1xuICAgICAgdG90YWxRdWVzdGlvbnMrKztcbiAgICAgIGlmICh1c2VyUXVpeltxdWVzdGlvbl0gPT09IG1hdGNoUXVpeltxdWVzdGlvbl0pIHtcbiAgICAgICAgc2NvcmUrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiB0b3RhbFF1ZXN0aW9ucyA/IE1hdGgucm91bmQoKHNjb3JlIC8gdG90YWxRdWVzdGlvbnMpICogMTAwKSA6IDA7XG59XG5cbi8vIENoYXQgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgY3JlYXRlQ2hhdCA9IGFzeW5jICh1c2VySWQsIG90aGVyVXNlcklkKSA9PiB7XG4gIC8vIENoZWNrIGlmIGNoYXQgYWxyZWFkeSBleGlzdHNcbiAgY29uc3QgY2hhdHNSZWYgPSBjb2xsZWN0aW9uKGRiLCAnY2hhdHMnKTtcbiAgY29uc3QgcSA9IHF1ZXJ5KFxuICAgIGNoYXRzUmVmLCBcbiAgICB3aGVyZSgncGFydGljaXBhbnRzJywgJ2FycmF5LWNvbnRhaW5zJywgdXNlcklkKVxuICApO1xuICBcbiAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG4gIGxldCBleGlzdGluZ0NoYXQgPSBudWxsO1xuICBcbiAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICBjb25zdCBjaGF0RGF0YSA9IGRvYy5kYXRhKCk7XG4gICAgaWYgKGNoYXREYXRhLnBhcnRpY2lwYW50cy5pbmNsdWRlcyhvdGhlclVzZXJJZCkpIHtcbiAgICAgIGV4aXN0aW5nQ2hhdCA9IHsgaWQ6IGRvYy5pZCwgLi4uY2hhdERhdGEgfTtcbiAgICB9XG4gIH0pO1xuICBcbiAgaWYgKGV4aXN0aW5nQ2hhdCkge1xuICAgIHJldHVybiB7IGNoYXRJZDogZXhpc3RpbmdDaGF0LmlkIH07XG4gIH1cbiAgXG4gIC8vIENyZWF0ZSBuZXcgY2hhdFxuICBjb25zdCBjaGF0UmVmID0gYXdhaXQgYWRkRG9jKGNvbGxlY3Rpb24oZGIsICdjaGF0cycpLCB7XG4gICAgcGFydGljaXBhbnRzOiBbdXNlcklkLCBvdGhlclVzZXJJZF0sXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIGxhc3RNZXNzYWdlOiBudWxsLFxuICAgIGxhc3RNZXNzYWdlQXQ6IG51bGxcbiAgfSk7XG4gIFxuICByZXR1cm4geyBjaGF0SWQ6IGNoYXRSZWYuaWQgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZW5kTWVzc2FnZSA9IGFzeW5jIChjaGF0SWQsIG1lc3NhZ2UpID0+IHtcbiAgY29uc3QgY2hhdFJlZiA9IGRvYyhkYiwgJ2NoYXRzJywgY2hhdElkKTtcbiAgY29uc3QgbWVzc2FnZURhdGEgPSB7XG4gICAgLi4ubWVzc2FnZSxcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKClcbiAgfTtcbiAgXG4gIC8vIEFkZCBtZXNzYWdlIHRvIGNoYXRcbiAgY29uc3QgbWVzc2FnZVJlZiA9IGF3YWl0IGFkZERvYyhcbiAgICBjb2xsZWN0aW9uKGRiLCAnY2hhdHMnLCBjaGF0SWQsICdtZXNzYWdlcycpLFxuICAgIG1lc3NhZ2VEYXRhXG4gICk7XG4gIFxuICAvLyBVcGRhdGUgbGFzdCBtZXNzYWdlIGluIGNoYXRcbiAgYXdhaXQgdXBkYXRlRG9jKGNoYXRSZWYsIHtcbiAgICBsYXN0TWVzc2FnZTogbWVzc2FnZS50ZXh0LFxuICAgIGxhc3RNZXNzYWdlQXQ6IG5ldyBEYXRlKCksXG4gICAgW2BsYXN0TWVzc2FnZVJlYWQuJHttZXNzYWdlLnNlbmRlcklkfWBdOiB0cnVlLFxuICAgIFtgbGFzdE1lc3NhZ2VSZWFkLiR7bWVzc2FnZS5yZWNlaXZlcklkfWBdOiBmYWxzZVxuICB9KTtcbiAgXG4gIHJldHVybiB7IG1lc3NhZ2VJZDogbWVzc2FnZVJlZi5pZCB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENoYXRNZXNzYWdlcyA9IGFzeW5jIChjaGF0SWQpID0+IHtcbiAgY29uc3QgbWVzc2FnZXNSZWYgPSBjb2xsZWN0aW9uKGRiLCAnY2hhdHMnLCBjaGF0SWQsICdtZXNzYWdlcycpO1xuICBjb25zdCBxID0gcXVlcnkobWVzc2FnZXNSZWYsIG9yZGVyQnkoJ2NyZWF0ZWRBdCcsICdhc2MnKSk7XG4gIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpO1xuICBcbiAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgcXVlcnlTbmFwc2hvdC5mb3JFYWNoKChkb2MpID0+IHtcbiAgICBtZXNzYWdlcy5wdXNoKHsgaWQ6IGRvYy5pZCwgLi4uZG9jLmRhdGEoKSB9KTtcbiAgfSk7XG4gIFxuICByZXR1cm4gbWVzc2FnZXM7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlckNoYXRzID0gYXN5bmMgKHVzZXJJZCkgPT4ge1xuICBjb25zdCBjaGF0c1JlZiA9IGNvbGxlY3Rpb24oZGIsICdjaGF0cycpO1xuICBjb25zdCBxID0gcXVlcnkoXG4gICAgY2hhdHNSZWYsXG4gICAgd2hlcmUoJ3BhcnRpY2lwYW50cycsICdhcnJheS1jb250YWlucycsIHVzZXJJZCksXG4gICAgb3JkZXJCeSgnbGFzdE1lc3NhZ2VBdCcsICdkZXNjJylcbiAgKTtcbiAgXG4gIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpO1xuICBcbiAgY29uc3QgY2hhdHMgPSBbXTtcbiAgZm9yIChjb25zdCBkb2Mgb2YgcXVlcnlTbmFwc2hvdC5kb2NzKSB7XG4gICAgY29uc3QgY2hhdERhdGEgPSBkb2MuZGF0YSgpO1xuICAgIFxuICAgIC8vIEdldCBvdGhlciBwYXJ0aWNpcGFudCBkZXRhaWxzXG4gICAgY29uc3Qgb3RoZXJVc2VySWQgPSBjaGF0RGF0YS5wYXJ0aWNpcGFudHMuZmluZChpZCA9PiBpZCAhPT0gdXNlcklkKTtcbiAgICBjb25zdCBvdGhlclVzZXJEb2MgPSBhd2FpdCBnZXREb2MoZG9jKGRiLCAncm9vbWllLXVzZXJzJywgb3RoZXJVc2VySWQpKTtcbiAgICBcbiAgICBjaGF0cy5wdXNoKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICBvdGhlclVzZXI6IHtcbiAgICAgICAgaWQ6IG90aGVyVXNlcklkLFxuICAgICAgICBuYW1lOiBvdGhlclVzZXJEb2MuZXhpc3RzKCkgPyBvdGhlclVzZXJEb2MuZGF0YSgpLm5hbWUgOiAnVW5rbm93biBVc2VyJ1xuICAgICAgfSxcbiAgICAgIGxhc3RNZXNzYWdlOiBjaGF0RGF0YS5sYXN0TWVzc2FnZSxcbiAgICAgIGxhc3RNZXNzYWdlQXQ6IGNoYXREYXRhLmxhc3RNZXNzYWdlQXQsXG4gICAgICB1bnJlYWQ6IGNoYXREYXRhLmxhc3RNZXNzYWdlUmVhZCA/ICFjaGF0RGF0YS5sYXN0TWVzc2FnZVJlYWRbdXNlcklkXSA6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgXG4gIHJldHVybiBjaGF0cztcbn07XG5cbi8vIE1vb2QgdHJhY2tpbmcgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgcmVjb3JkTW9vZCA9IGFzeW5jICh1c2VySWQsIG1vb2REYXRhKSA9PiB7XG4gIGF3YWl0IGFkZERvYyhcbiAgICBjb2xsZWN0aW9uKGRiLCAncm9vbWllLXVzZXJzJywgdXNlcklkLCAnbW9vZHMnKSxcbiAgICB7XG4gICAgICAuLi5tb29kRGF0YSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKVxuICAgIH1cbiAgKTtcbiAgXG4gIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyTW9vZHMgPSBhc3luYyAodXNlcklkLCBsaW1pdENvdW50ID0gNykgPT4ge1xuICBjb25zdCBtb29kc1JlZiA9IGNvbGxlY3Rpb24oZGIsICdyb29taWUtdXNlcnMnLCB1c2VySWQsICdtb29kcycpO1xuICBjb25zdCBxID0gcXVlcnkoXG4gICAgbW9vZHNSZWYsXG4gICAgb3JkZXJCeSgnY3JlYXRlZEF0JywgJ2Rlc2MnKSxcbiAgICBsaW1pdChsaW1pdENvdW50KVxuICApO1xuICBcbiAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSk7XG4gIFxuICBjb25zdCBtb29kcyA9IFtdO1xuICBxdWVyeVNuYXBzaG90LmZvckVhY2goKGRvYykgPT4ge1xuICAgIG1vb2RzLnB1c2goeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pO1xuICB9KTtcbiAgXG4gIHJldHVybiBtb29kcztcbn07XG5cblxuZXhwb3J0IHsgYXV0aCwgZGIgfTsiXSwibmFtZXMiOlsiZ2V0QXV0aCIsInNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkIiwiY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkIiwic2lnbk91dCIsImdldEZpcmVzdG9yZSIsImRvYyIsInNldERvYyIsImdldERvYyIsInVwZGF0ZURvYyIsImNvbGxlY3Rpb24iLCJhZGREb2MiLCJxdWVyeSIsIndoZXJlIiwiZ2V0RG9jcyIsIm9yZGVyQnkiLCJsaW1pdCIsInNlcnZlclRpbWVzdGFtcCIsImFwcCIsImF1dGgiLCJkYiIsInNpZ25JblVzZXIiLCJlbWFpbCIsInBhc3N3b3JkIiwidXNlckNyZWRlbnRpYWwiLCJlcnJvciIsImNvbnNvbGUiLCJyZWdpc3RlcldpdGhFbWFpbCIsInVzZXJEYXRhIiwiRXJyb3IiLCJ1c2VyRGF0YVRvU2F2ZSIsIm5hbWUiLCJnZW5kZXIiLCJwaG9uZU51bWJlciIsInByZWZlcmVuY2VzIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInVwZGF0ZWRBdCIsInVzZXIiLCJ1aWQiLCJsb2dvdXRVc2VyIiwiZ2V0VXNlclByb2ZpbGUiLCJ1c2VySWQiLCJkb2NSZWYiLCJkb2NTbmFwIiwiZXhpc3RzIiwiaWQiLCJkYXRhIiwiZ2V0QWxsVXNlcnMiLCJ1c2Vyc1JlZiIsInEiLCJxdWVyeVNuYXBzaG90IiwidXNlcnMiLCJmb3JFYWNoIiwicHVzaCIsInVwZGF0ZVVzZXJQcm9maWxlIiwidXNlclJlZiIsInN1Y2Nlc3MiLCJzYXZlUXVpelJlc3VsdHMiLCJxdWl6RGF0YSIsInF1aXpSZWYiLCJhbnN3ZXJzIiwiY29tcGxldGVkQXQiLCJmaW5kTWF0Y2hlcyIsInVzZXJTbmFwIiwicXVpeiIsIm1hdGNoZXMiLCJwb3RlbnRpYWxNYXRjaCIsImNvbXBhdGliaWxpdHlTY29yZSIsImNhbGN1bGF0ZUNvbXBhdGliaWxpdHkiLCJjb21wYXRpYmlsaXR5Iiwic29ydCIsImEiLCJiIiwidXNlclF1aXoiLCJtYXRjaFF1aXoiLCJzY29yZSIsInRvdGFsUXVlc3Rpb25zIiwicXVlc3Rpb24iLCJNYXRoIiwicm91bmQiLCJjcmVhdGVDaGF0Iiwib3RoZXJVc2VySWQiLCJjaGF0c1JlZiIsImV4aXN0aW5nQ2hhdCIsImNoYXREYXRhIiwicGFydGljaXBhbnRzIiwiaW5jbHVkZXMiLCJjaGF0SWQiLCJjaGF0UmVmIiwibGFzdE1lc3NhZ2UiLCJsYXN0TWVzc2FnZUF0Iiwic2VuZE1lc3NhZ2UiLCJtZXNzYWdlIiwibWVzc2FnZURhdGEiLCJtZXNzYWdlUmVmIiwidGV4dCIsInNlbmRlcklkIiwicmVjZWl2ZXJJZCIsIm1lc3NhZ2VJZCIsImdldENoYXRNZXNzYWdlcyIsIm1lc3NhZ2VzUmVmIiwibWVzc2FnZXMiLCJnZXRVc2VyQ2hhdHMiLCJjaGF0cyIsImRvY3MiLCJmaW5kIiwib3RoZXJVc2VyRG9jIiwib3RoZXJVc2VyIiwidW5yZWFkIiwibGFzdE1lc3NhZ2VSZWFkIiwicmVjb3JkTW9vZCIsIm1vb2REYXRhIiwiZ2V0VXNlck1vb2RzIiwibGltaXRDb3VudCIsIm1vb2RzUmVmIiwibW9vZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/firebase.js\n"));

/***/ })

});